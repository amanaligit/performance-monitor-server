{"version":3,"sources":["utilities/socketConnection.js","utilities/canvasLoadAnimation.js","Cpu.js","Info.js","Mem.js","Widget.js","App.js","index.js"],"names":["socket","io","connect","emit","drawCircle","canvas","currentLoad","context","getContext","clearRect","fillStyle","beginPath","arc","Math","PI","closePath","fill","lineWidth","strokeStyle","stroke","Cpu","props","document","getElementById","cpuData","cpuWidgetId","cpuLoad","className","id","width","height","Info","infoData","osType","moment","duration","upTime","humanize","cpuModel","cpuNumCores","cpuSpeed","Mem","memData","totalMem","freeMem","memUsage","memWidgetId","floor","Widget","data","usedMem","numCores","macA","notActiveDiv","isActive","App","useState","performanceData","setPerformanceData","useEffect","on","perf","perf2","removeAllListeners","widgets","Object","entries","map","key","value","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4218367f.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\n\r\nlet socket = io.connect();\r\n\r\nsocket.emit('clientAuth', 'askgjhasdfil935871893');\r\n\r\nexport default socket;","function drawCircle(canvas, currentLoad) {\n    if (canvas) {\n        let context = canvas.getContext('2d');\n        // Draw Inner Circle\n        context.clearRect(0, 0, 500, 500)\n        context.fillStyle = \"#ccc\";\n        context.beginPath();\n        context.arc(100, 100, 90, Math.PI * 0, Math.PI * 2);\n        context.closePath();\n        context.fill();\n\n        // Draw the outter line\n        // 10px wide line\n        context.lineWidth = 10;\n        if (currentLoad < 20) {\n            context.strokeStyle = '#00ff00';\n        } else if (currentLoad < 40) {\n            context.strokeStyle = '#337ab7';\n        } else if (currentLoad < 60) {\n            context.strokeStyle = '#f0ad4e';\n        } else {\n            context.strokeStyle = '#d9534f';\n        }\n        context.beginPath();\n        context.arc(100, 100, 95, Math.PI * 1.5, (Math.PI * 2 * currentLoad / 100) + Math.PI * 1.5);\n        context.stroke();\n    }\n}\n\nexport default drawCircle;\n","import React from 'react'\r\nimport drawCircle from './utilities/canvasLoadAnimation'\r\n\r\nfunction Cpu(props) {\r\n    const canvas = document.getElementById(`${props.cpuData.cpuWidgetId}`);\r\n    drawCircle(canvas, props.cpuData.cpuLoad)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"col-sm-3 cpu\">\r\n                <h3>\r\n                    CPU Load\r\n\r\n                </h3>\r\n\r\n                <div className=\"canvas-wrapper\">\r\n                    <canvas id={props.cpuData.cpuWidgetId} width='200' height='200'>\r\n                    </canvas>\r\n                    <div className=\"cpu-text\">\r\n                        {props.cpuData.cpuLoad}%\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cpu\r\n","import React from 'react';\r\nimport moment from 'moment';\r\n\r\n\r\nfunction Info(props) {\r\n    return (\r\n        <div className=\"col-sm-3 col-sm-offset-1 cpu-info\">\r\n            <h3>Operating System</h3>\r\n            <div className=\"widget-text\">{props.infoData.osType}</div>\r\n            <h3>Time Online</h3>\r\n            <div className=\"widget-text\">{moment.duration(props.infoData.upTime * 1000).humanize()}</div>\r\n            <h3>Processor information</h3>\r\n            <div className=\"widget-text\"><strong>Type:</strong> {props.infoData.cpuModel}</div>\r\n            <div className=\"widget-text\"><strong>Number of Cores:</strong> {props.infoData.cpuNumCores}</div>\r\n            <div className=\"widget-text\"><strong>Clock Speed:</strong> {props.infoData.cpuSpeed}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default (Info);\r\n\r\n","import React from 'react'\r\nimport drawCircle from './utilities/canvasLoadAnimation'\r\n\r\n\r\nfunction Mem(props) {\r\n    const { totalMem, freeMem, memUsage, memWidgetId } = props.memData;\r\n    const canvas = document.getElementById(`${memWidgetId}`);\r\n    drawCircle(canvas, memUsage * 100);\r\n    return (\r\n        <>\r\n            <div className=\"col-sm-3 mem\">\r\n                <h3>\r\n                    Memory Usage\r\n                </h3>\r\n                <div className=\"canvas-wrapper\">\r\n                    <canvas id={memWidgetId} width='200' height='200'></canvas>\r\n                    <div className=\"mem-text\">\r\n                        {Math.floor(memUsage * 100)}%\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    Total Memory: {Math.floor(totalMem / 1073741824 * 100) / 100}GB\r\n                </div>\r\n                <div>\r\n                    Free Memory: {Math.floor(freeMem / 1073741824 * 100) / 100}GB\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Mem\r\n","import React from 'react'\r\nimport Cpu from './Cpu'\r\nimport Info from './Info'\r\nimport Mem from './Mem'\r\nimport './widget.css'\r\n\r\nfunction Widget(props) {\r\n\r\n    const { osType,\r\n        upTime,\r\n        freeMem,\r\n        totalMem,\r\n        usedMem,\r\n        memUsage,\r\n        cpuModel,\r\n        numCores,\r\n        cpuLoad,\r\n        cpuSpeed,\r\n        macA,\r\n        isActive } = props.data;\r\n\r\n    let notActiveDiv = '';\r\n    if (!isActive) {\r\n        notActiveDiv =\r\n            <div className=\"not-active\">\r\n                OFFLINE\r\n            </div>\r\n    }\r\n\r\n    const cpuWidgetId = `cpu-widget-${macA}`;\r\n    const memWidgetId = `mem-widget-${macA}`;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"widget col-sm-12\">\r\n                {notActiveDiv}\r\n                <Cpu cpuData={{ cpuLoad, cpuWidgetId }} />\r\n                <Mem memData={{ totalMem, usedMem, freeMem, memUsage, memWidgetId }} />\r\n                <Info infoData={{ macA, osType, upTime, cpuModel, numCores, cpuSpeed }} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Widget\r\n","import './App.css';\nimport socket from './utilities/socketConnection'\nimport { useEffect, useState } from 'react';\nimport Widget from './Widget';\n\nfunction App(props) {\n\n  const [performanceData, setPerformanceData] = useState({});\n\n  useEffect(() => {\n    //update the state\n    socket.on('data', data => {\n      setPerformanceData(perf => {\n        const perf2 = { ...perf }\n        perf2[data.macA] = data;\n        return perf2;\n      })\n    })\n\n    return function cleanup() {\n      socket.removeAllListeners(\"data\")\n    }\n  })\n\n  let widgets = Object.entries(performanceData).map(([key, value]) => <Widget key={key} data={value}></Widget>);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"display-1\">\n        Performance Monitor\n      </h1>\n      {widgets}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}