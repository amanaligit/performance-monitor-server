{"version":3,"sources":["utilities/socketConnection.js","utilities/canvasLoadAnimation.js","Cpu.js","Info.js","Mem.js","Widget.js","App.js","index.js"],"names":["socket","io","connect","emit","drawCircle","canvas","currentLoad","context","getContext","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","clearRect","fillStyle","beginPath","arc","Math","PI","closePath","fill","lineWidth","strokeStyle","stroke","Cpu","props","document","getElementById","cpuData","cpuWidgetId","cpuLoad","className","id","width","height","Info","style","marginRight","infoData","osType","moment","duration","upTime","humanize","cpuModel","numCores","cpuSpeed","Mem","memData","totalMem","freeMem","memUsage","memWidgetId","floor","Widget","data","usedMem","macA","isActive","notActiveDiv","color","fontFamily","display","justifyContent","alignItems","App","useState","performanceData","setPerformanceData","useEffect","on","perf","perf2","removeAllListeners","widgets","Object","entries","map","key","value","href","marginTop","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4923c514.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\n\r\nlet socket = io.connect(\"https://performance-monitor-0.herokuapp.com/\");\r\n\r\nsocket.emit(\"clientAuth\", \"askgjhasdfil935871893\");\r\n\r\nexport default socket;\r\n","function drawCircle(canvas, currentLoad) {\r\n  if (canvas) {\r\n    let context = canvas.getContext(\"2d\");\r\n    // Draw Inner Circle\r\n    context.shadowColor = \"black\";\r\n    context.shadowBlur = 6;\r\n    context.shadowOffsetX = 1;\r\n    context.shadowOffsetY = 1;\r\n    context.clearRect(0, 0, 500, 500);\r\n    context.fillStyle = \"rgba(0, 0, 0, 0.534)\";\r\n    context.beginPath();\r\n    context.arc(150, 150, 90, Math.PI * 0, Math.PI * 2);\r\n    context.closePath();\r\n    context.fill();\r\n\r\n    // Draw the outter line\r\n    // 10px wide line\r\n    context.lineWidth = 10;\r\n    if (currentLoad < 20) {\r\n      context.strokeStyle = \"#00ff00\";\r\n    } else if (currentLoad < 40) {\r\n      context.strokeStyle = \"#337ab7\";\r\n    } else if (currentLoad < 60) {\r\n      context.strokeStyle = \"yellow\";\r\n    } else {\r\n      context.strokeStyle = \"red\";\r\n    }\r\n    context.beginPath();\r\n    context.arc(\r\n      150,\r\n      150,\r\n      100,\r\n      Math.PI * 1.5,\r\n      (Math.PI * 2 * currentLoad) / 100 + Math.PI * 1.5\r\n    );\r\n    context.stroke();\r\n  }\r\n}\r\n\r\nexport default drawCircle;\r\n","import React from \"react\";\r\nimport drawCircle from \"./utilities/canvasLoadAnimation\";\r\n\r\nfunction Cpu(props) {\r\n  const canvas = document.getElementById(`${props.cpuData.cpuWidgetId}`);\r\n  drawCircle(canvas, props.cpuData.cpuLoad);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"cpu\">\r\n        <h3 className=\"heading\">\r\n          CPU Load <i className=\"fas fa-server\"></i>\r\n        </h3>\r\n\r\n        <div className=\"canvas-wrapper\">\r\n          <canvas\r\n            id={props.cpuData.cpuWidgetId}\r\n            width=\"300\"\r\n            height=\"300\"\r\n          ></canvas>\r\n          <div className=\"cpu-text\">{props.cpuData.cpuLoad}%</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Cpu;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nfunction Info(props) {\r\n  return (\r\n    <div className=\"cpu-info\">\r\n      <h1 className=\"heading text-center mb-4\">\r\n        {\" \"}\r\n        <i className=\"fas fa-info-circle\" style={{ marginRight: \"10px\" }}></i>\r\n        System Info\r\n      </h1>\r\n      <h3 className=\"heading\">\r\n        {props.infoData.osType === \"Linux\" ? (\r\n          <i className=\"fab fa-linux\" style={{ marginRight: \"5px\" }}></i>\r\n        ) : (\r\n          <i className=\"fab fa-windows\" style={{ marginRight: \"5px\" }}></i>\r\n        )}\r\n        Operating System\r\n      </h3>\r\n      <div className=\"widget-text\">{props.infoData.osType}</div>\r\n      <h3 className=\"heading\">\r\n        <i className=\"fas fa-clock\" style={{ marginRight: \"5px\" }}></i>\r\n        Time Online\r\n      </h3>\r\n      <div className=\"widget-text\">\r\n        {moment.duration(props.infoData.upTime * 1000).humanize()}\r\n      </div>\r\n      <h3 className=\"heading\">\r\n        {\" \"}\r\n        <i className=\"fas fa-microchip\" style={{ marginRight: \"5px\" }}></i>\r\n        Processor information\r\n      </h3>\r\n      <div className=\"widget-text\">\r\n        <strong>Type:</strong> {props.infoData.cpuModel}\r\n      </div>\r\n      <div className=\"widget-text\">\r\n        <strong>Number of Cores:</strong> {props.infoData.numCores}\r\n      </div>\r\n      <div className=\"widget-text\">\r\n        <strong>Clock Speed:</strong> {props.infoData.cpuSpeed / 1000}GHz\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\nimport drawCircle from \"./utilities/canvasLoadAnimation\";\r\n\r\nfunction Mem(props) {\r\n  const { totalMem, freeMem, memUsage, memWidgetId } = props.memData;\r\n  const canvas = document.getElementById(`${memWidgetId}`);\r\n  drawCircle(canvas, memUsage * 100);\r\n  return (\r\n    <>\r\n      <div className=\"mem\">\r\n        <h3 className=\"heading\">\r\n          Memory Usage <i className=\"fas fa-memory\"></i>\r\n        </h3>\r\n        <div className=\"canvas-wrapper\">\r\n          <canvas id={memWidgetId} width=\"300\" height=\"300\"></canvas>\r\n          <div className=\"mem-text\">{Math.floor(memUsage * 100)}%</div>\r\n        </div>\r\n        <div>\r\n          Total Memory: {Math.floor((totalMem / 1073741824) * 100) / 100}GB\r\n        </div>\r\n        <div>\r\n          Free Memory: {Math.floor((freeMem / 1073741824) * 100) / 100}GB\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Mem;\r\n","import React from \"react\";\r\nimport Cpu from \"./Cpu\";\r\nimport Info from \"./Info\";\r\nimport Mem from \"./Mem\";\r\nimport \"./widget.css\";\r\n\r\nfunction Widget(props) {\r\n  const {\r\n    osType,\r\n    upTime,\r\n    freeMem,\r\n    totalMem,\r\n    usedMem,\r\n    memUsage,\r\n    cpuModel,\r\n    numCores,\r\n    cpuLoad,\r\n    cpuSpeed,\r\n    macA,\r\n    isActive,\r\n  } = props.data;\r\n\r\n  let notActiveDiv = \"\";\r\n  if (!isActive) {\r\n    notActiveDiv = (\r\n      <div className=\"not-active\">\r\n        <i className=\"fas fa-exclamation-triangle m-3\"></i>\r\n        OFFLINE\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const cpuWidgetId = `cpu-widget-${macA}`;\r\n  const memWidgetId = `mem-widget-${macA}`;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"widget-container\">\r\n        <h1 style={{ color: `${isActive ? \"green\" : \"red\"}` }}>\r\n          {\" \"}\r\n          {isActive ? (\r\n            <span\r\n              style={{\r\n                fontFamily: \"inherit\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              <i\r\n                className=\"fas fa-check-square \"\r\n                style={{ marginRight: \"5px\" }}\r\n              ></i>\r\n              Active System{\" \"}\r\n            </span>\r\n          ) : (\r\n            <span\r\n              style={{\r\n                fontFamily: \"inherit\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              <i\r\n                className=\"fas fa-times-circle \"\r\n                style={{ marginRight: \"5px\" }}\r\n              ></i>\r\n              Inactive System{\" \"}\r\n            </span>\r\n          )}{\" \"}\r\n        </h1>\r\n        <div className=\"widget\">\r\n          {notActiveDiv}\r\n          <Cpu cpuData={{ cpuLoad, cpuWidgetId }} />\r\n          <Mem\r\n            memData={{ totalMem, usedMem, freeMem, memUsage, memWidgetId }}\r\n          />\r\n          <Info\r\n            infoData={{ macA, osType, upTime, cpuModel, numCores, cpuSpeed }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Widget;\r\n","import \"./App.css\";\r\nimport socket from \"./utilities/socketConnection\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Widget from \"./Widget\";\r\n\r\nfunction App(props) {\r\n  const [performanceData, setPerformanceData] = useState({});\r\n\r\n  useEffect(() => {\r\n    //update the state\r\n    socket.on(\"data\", (data) => {\r\n      setPerformanceData((perf) => {\r\n        const perf2 = { ...perf };\r\n        perf2[data.macA] = data;\r\n        return perf2;\r\n      });\r\n    });\r\n\r\n    return function cleanup() {\r\n      socket.removeAllListeners(\"data\");\r\n    };\r\n  });\r\n\r\n  let widgets = Object.entries(performanceData).map(([key, value]) => (\r\n    <Widget key={key} data={value}></Widget>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"nav\">\r\n        <div className=\"logo\">\r\n          <i className=\"fas fa-chart-bar\"></i>\r\n        </div>\r\n        <div className=\"title\">Performance Monitor</div>\r\n        <a\r\n          className=\"buttons\"\r\n          href=\"https://github.com/amanaligit/performance-monitor\"\r\n        >\r\n          <i className=\"fab fa-github\"></i>{\" \"}\r\n          <span className=\"git\">Aman's GitHub</span>\r\n        </a>\r\n      </nav>\r\n\r\n      <div style={{ marginTop: \"100px\" }}>{widgets}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}